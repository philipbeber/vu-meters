{"version":3,"sources":["audio/index.ts","BarChart.tsx","App.tsx","reportWebVitals.ts","arduino/index.ts","redux/reducers/audioReducer.ts","redux/reducers/rootReducer.ts","redux/store/index.ts","index.tsx"],"names":["window","AudioContext","webkitAudioContext","audioContext","visualizeAudioFromUrl","url","maxLength","sampleRate","fetch","then","response","arrayBuffer","visualizeAudioFromFile","decodeAudioData","audioBuffer","filterData","console","log","rawData","getChannelData","frameCount","Math","floor","maxSamples","min","length","windowCount","rollingSum","i","samples","maxSample","sample","sqrt","push","max","id","uuid","msPerSample","map","BarChart","props","canvasRef","React","useRef","useEffect","canvas","current","context","getContext","fillStyle","forEach","index","size","height","fillRect","ref","style","width","App","useState","loading","setLoading","setUrl","defaultStartPin","useSelector","state","audio","startPin","setStartPin","defaultSampleRate","setSampleRate","audioDispatch","useDispatch","sampleSets","code","fileInputRef","handleLoadFromUrl","a","sampleSet","type","handleChangeFile","event","files","target","buffer","saveStartPin","startPinNum","parseInt","isFinite","saveSampleRate","newSR","Container","maxWidth","Grid","container","spacing","item","xs","Button","variant","color","onClick","TextField","value","onChange","e","click","display","label","onBlur","onKeyDown","key","text","CircularProgress","alignItems","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createCode","set","pin","toString","join","declareVariables","writePin","initialState","audioReducer","action","filter","rootReducer","combineReducers","store","createStore","serializedState","localStorage","getItem","frozenState","JSON","parse","version","newState","restoreFromFrozen","err","warn","loadState","devToolsEnhancer","subscribe","_","getState","stringify","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75cdf2e.chunk.js","sourcesContent":["import * as uuid from \"short-uuid\";\nimport { SampleSet } from \"../model\";\n\nwindow.AudioContext =\n  window.AudioContext || ((window as any).webkitAudioContext as AudioContext);\n\nconst audioContext = new AudioContext();\n\nexport const visualizeAudioFromUrl = (url: string, maxLength: number, sampleRate: number) => {\n  return fetch(url)\n    .then((response) => response.arrayBuffer())\n    .then((arrayBuffer) => visualizeAudioFromFile(arrayBuffer, maxLength, sampleRate));\n};\n\nexport const visualizeAudioFromFile = (arrayBuffer: ArrayBuffer, maxLength: number, sampleRate: number) => {\n    return audioContext.decodeAudioData(arrayBuffer)\n      .then(audioBuffer => filterData(audioBuffer, maxLength, sampleRate))\n}\n\n// const sampleTime = 10; // how often (in ms) we output a sample\nconst windowSize = 1; // how big the window is that we sample, compared to sampleTime\n\nconst filterData = (audioBuffer: AudioBuffer, maxLength: number, sampleRate: number): SampleSet | undefined => {\n  console.log(\"Input sample rate\", audioBuffer.sampleRate);\n  const rawData = audioBuffer.getChannelData(0); // TODO: Use more than one channel\n  const frameCount = Math.floor(audioBuffer.sampleRate / sampleRate); // Number of frames in each sample\n  const maxSamples = Math.min(rawData.length / frameCount, maxLength * sampleRate);\n  console.log(\"Frame count\", frameCount);\n  const windowCount = frameCount * windowSize;\n  if (rawData.length <= frameCount) {\n      return;\n  }\n  let rollingSum = 0;\n  for (let i = 0; i < windowCount; i++) {\n      rollingSum += rawData[i] * rawData[i];\n  }\n  const samples = [] as number[];\n  let maxSample = 0;\n  for (let i = windowCount; i < rawData.length; i++) {\n      if (i % frameCount === 0) {\n          const sample = Math.sqrt(rollingSum / windowCount);\n          samples.push(sample);\n          maxSample = Math.max(sample, maxSample);\n          if (samples.length >= maxSamples) {\n              break;\n          }\n      }\n      rollingSum -= rawData[i - windowCount] * rawData[i - windowCount];\n      rollingSum += rawData[i] * rawData[i];\n  }\n  // Normalize to byte range\n  return {\n    id: uuid.generate(),\n    msPerSample: Math.floor(1000 / sampleRate),\n    samples: samples.map(sample => Math.floor(sample / maxSample * 255))\n  }\n};\n\n","import React from \"react\";\n\ninterface BarChartProps {\n  samples: number[];\n}\n\nconst BarChart: React.FC<BarChartProps> = (props) => {\n  const { samples } = props;\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) {\n        return;\n    }\n    const context = canvas.getContext('2d');\n    if (!context) {\n        return;\n    }\n    //Our first draw\n    context.fillStyle = '#000000';\n    samples.forEach((sample, index) => {\n        const size = context.canvas.height * sample / 256;\n        context.fillRect(index, (context.canvas.height - size) / 2, 1, size);\n    })\n  })\n\n  return <canvas ref={canvasRef} style={{ width: \"100%\", height: 100 }} />;\n};\n\nexport default BarChart;\n","import React, { Dispatch, Fragment, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Button,\n  CircularProgress,\n  Container,\n  Grid,\n  TextField,\n} from \"@material-ui/core\";\nimport * as Icons from \"@material-ui/icons\";\nimport {visualizeAudioFromFile, visualizeAudioFromUrl} from \"./audio\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AudioActions } from \"./redux/actions/audioActions\";\nimport { AppState } from \"./redux/reducers/rootReducer\";\nimport BarChart from \"./BarChart\";\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nconst defaultUrl =\n  \"https://archive.org/download/groovelinehorns2009-10-11.mk4.flac16/groovelinehorns2009-10-11t02.mp3\";\n\nconst maxLength = 30; // 30 seconds\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(defaultUrl);\n  const defaultStartPin = useSelector((state: AppState) => state.audio.startPin);\n  const [startPin, setStartPin] = useState(defaultStartPin + \"\");\n  const defaultSampleRate = useSelector((state: AppState) => state.audio.sampleRate);\n  const [sampleRate, setSampleRate] = useState(defaultSampleRate + \"\");\n  const audioDispatch = useDispatch<Dispatch<AudioActions>>();\n  const { sampleSets, code } = useSelector((state: AppState) => state.audio);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleLoadFromUrl = async () => {\n    setLoading(true);\n    const sampleSet = await visualizeAudioFromUrl(url, maxLength, defaultSampleRate);\n    if (sampleSet) {\n      audioDispatch({ type: \"LOAD_SAMPLES\", sampleSet });\n    }\n    setLoading(false);\n  };\n\n  const handleDelete = (id: string) => () => {\n    audioDispatch({ type: \"DELETE_SAMPLES\", id });\n  }\n\n  const handleLoadFromFile = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleChangeFile = async (event: {target: HTMLInputElement}) => {\n    setLoading(true);\n    const files = event.target.files;\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        const buffer = await files[i].arrayBuffer();\n        const sampleSet = await visualizeAudioFromFile(buffer, maxLength, defaultSampleRate);\n        if (sampleSet) {\n          audioDispatch({ type: \"LOAD_SAMPLES\", sampleSet });\n        }\n      }\n    }\n    setLoading(false);\n  }\n\n  const saveStartPin = () => {\n    const startPinNum = parseInt(startPin);\n    if (isFinite(startPinNum) && startPinNum >= 0 && startPinNum < 256) {\n      audioDispatch({type: \"CHANGE_START_PIN\", startPin: startPinNum })\n    }\n  }\n\n  const saveSampleRate = () => {\n    const newSR = parseInt(sampleRate);\n    if (isFinite(newSR) && newSR > 0) {\n      audioDispatch({type: \"CHANGE_SAMPLE_RATE\", sampleRate: newSR })\n    }\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Grid container spacing={2}>\n        <Grid item xs={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleLoadFromUrl}\n          >\n            Load from URL\n          </Button>\n        </Grid>\n        <Grid item xs={10}>\n          <TextField\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n            style={{ width: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleLoadFromFile}\n          >\n            Load from file\n          </Button>\n          <input\n            type=\"file\"\n            id=\"file\"\n            ref={fileInputRef}\n            style={{ display: \"none\" }}\n            onChange={handleChangeFile}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          {/* <TextField\n            label=\"Start Pin\"\n            value={startPin}\n            onChange={(e) => setStartPin(e.target.value)}\n            onBlur={saveStartPin}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                saveStartPin();\n              }\n            }}\n          /> */}\n        </Grid>\n        <Grid item xs={2}>\n          <TextField\n            label=\"Sample rate\"\n            value={sampleRate}\n            onChange={(e) => setSampleRate(e.target.value)}\n            onBlur={saveSampleRate}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                saveSampleRate();\n              }\n            }}\n            style={{display: \"none\"}}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <TextField\n            label=\"Start Pin\"\n            value={startPin}\n            onChange={(e) => setStartPin(e.target.value)}\n            onBlur={saveStartPin}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                saveStartPin();\n              }\n            }}\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <CopyToClipboard text={code}>\n            <button>Copy code to clipboard</button>\n          </CopyToClipboard>\n        </Grid>\n        <Grid item xs={1}>\n          {loading ? <CircularProgress /> : \"\"}\n        </Grid>\n        {sampleSets.map((sampleSet) => (\n          <Fragment key={sampleSet.id}>\n            <Grid item xs={11}>\n              <BarChart samples={sampleSet.samples} />\n            </Grid>\n            <Grid item xs={1} style={{ alignItems: \"center\", display: \"flex\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleDelete(sampleSet.id)}\n              >\n                <Icons.Delete />\n              </Button>\n            </Grid>\n          </Fragment>\n        ))}\n        <Grid item xs={12}>\n          <pre>{code}</pre>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { SampleSet } from \"../model\";\n\nfunction declareVariables(set: SampleSet, pin: number) {\n  return `int pin${pin} = ${pin};\nconst unsigned char pin${pin}data[] PROGMEM = { ${set.samples\n    .map((sample) => `0x${sample.toString(16)}`)\n    .join(\", \")} };\n`;\n}\n\nfunction setPinMode(set: SampleSet, pin: number) {\n  return `  pinMode(pin${pin}, OUTPUT);`;\n}\n\nfunction writePin(set: SampleSet, pin: number) {\n  return `  analogWrite(pin${pin}, pgm_read_byte_near(pin${pin}data + ((index / ${set.msPerSample}) % ${set.samples.length})));`;\n}\n\nexport function createCode(sampleSets: SampleSet[], startPin: number) {\n  if (!sampleSets.length) {\n    return \"\";\n  }\n\n  const code = `\n#include <avr/pgmspace.h>\n\n${sampleSets\n  .map((set, index) => declareVariables(set, startPin + index))\n  .join(\"\\n\")}\n\nunsigned long startTime;\n\nvoid setup()\n{\n${sampleSets.map((set, index) => setPinMode(set, startPin + index)).join(\"\\n\")}\n  startTime = millis();\n}\n\nvoid loop() {\n\n  unsigned long timeNow = millis();\n  unsigned int index = timeNow - startTime;\n\n${sampleSets.map((set, index) => writePin(set, startPin + index)).join(\"\\n\")}\n}\n`;\n\n  return code;\n}\n","import { createCode } from \"../../arduino\";\nimport { SampleSet } from \"../../model\";\nimport { AudioActions } from \"../actions/audioActions\";\n\ntype AudioState = {\n  sampleSets: SampleSet[];\n  startPin: number;\n  sampleRate: number;\n  code: string;\n};\nconst initialState: AudioState = {\n  sampleSets: [],\n  startPin: 9,\n  sampleRate: 100,\n  code: \"\"\n};\nconst audioReducer = (\n  state: AudioState = initialState,\n  action: AudioActions\n): AudioState => {\n  switch (action.type) {\n    case \"LOAD_SAMPLES\": {\n      const sampleSets = [...state.sampleSets, action.sampleSet]\n      return {\n        ...state,\n        sampleSets,\n        code: createCode(sampleSets, state.startPin)\n      };\n    }\n    case \"DELETE_SAMPLES\": {\n      const sampleSets = state.sampleSets.filter(set => set.id !== action.id)\n      return {\n        ...state,\n        sampleSets,\n        code: createCode(sampleSets, state.startPin)\n      }\n    }\n    case \"CHANGE_START_PIN\": {\n      return {\n        ...state,\n        startPin: action.startPin,\n        code: createCode(state.sampleSets, action.startPin),\n      };\n    }\n    case \"CHANGE_SAMPLE_RATE\": {\n      return {\n        ...state,\n        sampleRate: action.sampleRate\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default audioReducer;\n\nexport function restoreFromFrozen(state: AudioState) {\n  const newState: AudioState = {\n    ...initialState,\n    ...state\n  }\n  return {\n    ...newState,\n    code: createCode(newState.sampleSets, newState.startPin)\n  }\n}\n","import { combineReducers } from \"redux\";\nimport audioReducer from \"./audioReducer\";\nconst rootReducer = combineReducers({\n  audio: audioReducer,\n});\nexport type AppState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import * as _ from \"lodash\";\nimport { createStore, Store } from \"redux\";\nimport rootReducer, { AppState } from \"../reducers/rootReducer\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\nimport { AppActions } from \"../actions\";\nimport { restoreFromFrozen } from \"../reducers/audioReducer\";\n\nconst version = \"0.4\";\n\ninterface FrozenState {\n  version: string;\n  state: AppState;\n}\n\nconst store: Store<AppState, AppActions> = createStore(\n  rootReducer,\n  loadState(),\n  devToolsEnhancer({})\n);\nexport default store;\n\nstore.subscribe(\n  _.throttle(() => {\n    try {\n      const frozenState: FrozenState = {\n        version,\n        state: store.getState(),\n      };\n      const serializedState = JSON.stringify(frozenState);\n      localStorage.setItem(\"state\", serializedState);\n    } catch {\n      // ignore write errors\n    }\n  }, 1000)\n);\n\nfunction loadState() {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState) {\n      const frozenState = JSON.parse(serializedState) as FrozenState;\n      if (frozenState.version === version) {\n        const audio = frozenState.state.audio;\n        // Regenerate the code in case the logic changed\n        frozenState.state.audio = restoreFromFrozen(audio);\n        return frozenState.state;\n      }\n    }\n  } catch (err) {\n    console.warn(err);\n  }\n  return undefined;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}